[
  {
    "question": "What is useState and how does it work in React?",
    "answer": "useState is a React Hook that lets you add state to functional components. It returns an array with two elements: the current state and a function to update it. When the update function is called, React re-renders the component with the new state."
  },
  {
    "question": "What is the purpose of useEffect in React?",
    "answer": "useEffect is a React Hook used to perform side effects in functional components, such as data fetching, DOM manipulation, or setting up subscriptions. It runs after the component renders and can be controlled with a dependency array to re-run conditionally."
  },
  {
    "question": "What is a custom hook in React and when should you use one?",
    "answer": "A custom hook is a reusable JavaScript function that uses React hooks. It starts with the word 'use' and helps abstract logic that is shared across multiple components, making the code cleaner and more maintainable. Use one when you have logic shared between components (e.g., form handling, fetching data, etc.)."
  },
  {
    "question": "Difference between controlled and uncontrolled components? Which one is better?",
    "answer": "Controlled components are form elements where React controls the input value using state. Uncontrolled components store their own state internally and are accessed via refs. Controlled components offer better control and predictability, making them preferable for most use cases, especially in complex forms."
  },
  {
    "question": "Tell us something about useFormStatus()!! (explore and explain)",
    "answer": "useFormStatus is a React hook introduced in React 18 for use with the new <form> actions in server components. It returns the current status of a form submission (e.g., 'pending'). It's useful for showing loading indicators or disabling buttons during submission in server-driven apps using React Server Components or Next.js App Router."
  }
]
